{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport dynamic from \"next/dynamic\";\nimport React, { useEffect, useState } from \"react\";\nimport service from \"../../utils/service\";\nimport Select from \"react-select\";\nimport { EmptyLayout } from \"layouts\";\nimport { Button } from \"styles\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport \"tui-color-picker/dist/tui-color-picker.css\";\nimport \"highlight.js/styles/railscasts.css\";\nimport styled from \"styles/styled\";\nimport { useRouter } from \"next/router\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { CREATE_POST, MODIFY_POST, GET_POST } from \"@api/Post\";\nimport { GET_CATEGORIES } from \"@api/Category\";\nconst Editor = dynamic(() => import(\"components/TuiEditorWrapper\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"components/TuiEditorWrapper\")],\n    modules: [\"components/TuiEditorWrapper\"]\n  }\n});\nconst EditorWithForwardedRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(Editor, _objectSpread(_objectSpread({}, props), {}, {\n  forwardedRef: ref\n})));\n\nconst WysiwygEditor = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: post,\n    1: setPost\n  } = useState({\n    title: \"\",\n    category: \"\",\n    html: \"\",\n    html2: \"\",\n    email: \"ru_bryunak@naver.com\",\n    markdown: \"\"\n  });\n  const {\n    0: image,\n    1: setImage\n  } = useState([]);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const editorRef = React.useRef();\n  const imageUploadRef = React.useRef(null);\n  useQuery(GET_CATEGORIES, {\n    fetchPolicy: \"cache-first\",\n    onCompleted: data => {\n      const dummy = data.getCategories.reduce((acc, cur) => {\n        acc.push({\n          value: cur.category.toLowerCase(),\n          label: cur.category\n        });\n        return acc;\n      }, []);\n      setOptions(dummy);\n    }\n  });\n  useQuery(GET_POST, {\n    fetchPolicy: \"network-only\",\n    variables: {\n      id\n    },\n    skip: !id,\n    onCompleted: data => {\n      const post = data.getPost;\n      setPost({\n        email: post.user.email,\n        category: post.category,\n        title: post.title,\n        html: post.html,\n        markdown: post.markdown,\n        image: post.image,\n        html2: post.html2\n      });\n    }\n  });\n\n  const handleChange = () => {\n    if (!editorRef.current) {\n      return;\n    }\n\n    const instance = editorRef.current.getInstance();\n    const html2 = document.querySelector(\".tui-editor-contents\").innerHTML;\n    setPost(_objectSpread(_objectSpread({}, post), {}, {\n      html: instance.getHtml(),\n      html2,\n      markdown: instance.getMarkdown()\n    }));\n  };\n\n  const handleSelect = newValue => {\n    if (newValue) {\n      setPost(_objectSpread(_objectSpread({}, post), {}, {\n        category: newValue.value\n      }));\n    } else {\n      setPost(_objectSpread(_objectSpread({}, post), {}, {\n        category: null\n      }));\n    }\n  };\n\n  const handleTitle = event => {\n    const {\n      value\n    } = event.target;\n    setPost(_objectSpread(_objectSpread({}, post), {}, {\n      title: value\n    }));\n  };\n\n  const [EditPostMutation] = useMutation(id ? MODIFY_POST : CREATE_POST, {\n    onCompleted: () => {\n      router.push(`/${post.category}`);\n    }\n  });\n\n  const Submit = async () => {\n    await EditPostMutation({\n      variables: id ? {\n        id,\n        input: post\n      } : {\n        input: post\n      }\n    });\n  };\n\n  const addImageBlobHook = async (blob, callback) => {\n    const formData = new FormData();\n    formData.append(\"img\", blob);\n    const {\n      data\n    } = await service.post(\"/upload\", formData);\n    callback(data.contents, \"image\");\n    const elements = document.querySelectorAll(\".tui-editor-contents img\");\n    const images = [];\n    elements.forEach(image => images.push(image.src));\n    setImage(images);\n  };\n\n  const clickUploadInput = () => {\n    if (!imageUploadRef.current) return;\n    imageUploadRef.current.click();\n  };\n\n  const uploadFile = async event => {\n    const files = event.target.files;\n    const formData = new FormData();\n\n    if (files && files.length > 0) {\n      Array.from(files).forEach(item => {\n        formData.append(\"images\", item);\n      });\n    }\n\n    const {\n      data\n    } = await service.post(\"/upload\", formData);\n    const instance = editorRef.current.getInstance();\n    data.forEach(item => {\n      instance.insertText(`![image](${item.contents})`);\n    });\n    const elements = document.querySelectorAll(\".tui-editor-contents img\");\n    const images = [];\n    elements.forEach(image => images.push(image.src));\n    setImage(images);\n  };\n\n  useEffect(() => {\n    setPost(_objectSpread(_objectSpread({}, post), {}, {\n      image\n    }));\n  }, [image]);\n  return /*#__PURE__*/_jsxs(Wrap, {\n    children: [/*#__PURE__*/_jsxs(RowWrap, {\n      children: [/*#__PURE__*/_jsx(SelectWrap, {\n        instanceId: \"select\",\n        value: options.filter(item => item.value === post.category),\n        onChange: handleSelect,\n        options: options,\n        isClearable: true\n      }), /*#__PURE__*/_jsxs(Button, {\n        onClick: clickUploadInput,\n        children: [\"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\", /*#__PURE__*/_jsx(\"input\", {\n          ref: imageUploadRef,\n          type: \"file\",\n          multiple: true,\n          onChange: uploadFile,\n          style: {\n            display: \"none\"\n          }\n        })]\n      }), /*#__PURE__*/_jsx(ButtonWrap, {\n        variant: id ? \"warning\" : \"success\",\n        height: 38,\n        onClick: Submit,\n        children: id ? \"수정\" : \"등록\"\n      })]\n    }), /*#__PURE__*/_jsx(RowWrap, {\n      children: /*#__PURE__*/_jsx(TitleInput, {\n        onChange: handleTitle,\n        value: post.title,\n        placeholder: \"제목을 입력해주세요.\"\n      })\n    }), /*#__PURE__*/_jsx(EditorWithForwardedRef, {\n      initialValue: post.markdown,\n      previewStyle: \"vertical\",\n      height: \"600px\",\n      initialEditType: \"markdown\",\n      useCommandShortcut: true,\n      ref: editorRef,\n      previewHighlight: false,\n      onChange: handleChange,\n      hooks: {\n        addImageBlobHook\n      }\n    })]\n  });\n};\n\nexport default EmptyLayout(WysiwygEditor);\nconst Wrap = styled.div`\n  width: 100%;\n`;\nconst RowWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\nconst SelectWrap = styled(Select)`\n  margin-right: 1rem;\n  width: 300px;\n  font-size: 0.875rem;\n  z-index: 3;\n\n  > div {\n    border-color: #e5e5e5;\n  }\n`;\nconst ButtonWrap = styled(Button)`\n  margin-left: auto;\n`;\nconst TitleInput = styled.input`\n  margin: 0;\n  padding: 0 0.5rem;\n  width: 100%;\n  height: 2.5rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  border: 1px solid #e5e5e5;\n  border-radius: 4px;\n\n  :hover,\n  :focus {\n    border-color: hsl(0, 0%, 70%);\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}
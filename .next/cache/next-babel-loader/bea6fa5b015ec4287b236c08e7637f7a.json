{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, createHttpLink, InMemoryCache, ApolloLink } from \"@apollo/client\";\nimport cookie from \"js-cookie\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nconst httpLink = createHttpLink({\n  uri: false ? \"https://api.loelblog.com/graphql\" : \"http://146.56.176.230:3301/graphql\" // uri: \"https://api.loelblog.com/graphql\",\n\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = cookie.get(\"accessToken\");\n  const user = localStorage.getItem(\"user\");\n\n  if (!token) {\n    if (user) localStorage.removeItem(\"user\");\n    return;\n  }\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token\n    })\n  };\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError,\n  operation,\n  forward\n}) => {\n  if (graphQLErrors) {\n    console.log(graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\nconst link = ApolloLink.from([authLink, errorLink, httpLink]);\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\nexport default client;","map":{"version":3,"sources":["/Users/loel/Documents/loel-blog/apollo/index.ts"],"names":["ApolloClient","createHttpLink","InMemoryCache","ApolloLink","cookie","setContext","onError","httpLink","uri","authLink","_","headers","token","get","user","localStorage","getItem","removeItem","authorization","errorLink","graphQLErrors","networkError","operation","forward","console","log","link","from","client","cache","connectToDevTools"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,EAAsDC,UAAtD,QAAwE,gBAAxE;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,QAAQ,GAAGN,cAAc,CAAC;AAC9BO,EAAAA,GAAG,EAAE,QAAwC,kCAAxC,GAA6E,oCADpD,CAE9B;;AAF8B,CAAD,CAA/B;AAKA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGR,MAAM,CAACS,GAAP,CAAW,aAAX,CAAd;AACA,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;;AAEA,MAAI,CAACJ,KAAL,EAAY;AACV,QAAIE,IAAJ,EAAUC,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACV;AACD;;AAED,SAAO;AACLN,IAAAA,OAAO,kCACFA,OADE;AAELO,MAAAA,aAAa,EAAEN;AAFV;AADF,GAAP;AAMD,CAf0B,CAA3B;AAiBA,MAAMO,SAAS,GAAGb,OAAO,CAAC,CAAC;AAAEc,EAAAA,aAAF;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA,SAA/B;AAA0CC,EAAAA;AAA1C,CAAD,KAAyD;AACjF,MAAIH,aAAJ,EAAmB;AACjBI,IAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AACD;;AACD,MAAIC,YAAJ,EAAkB;AAChBG,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBJ,YAAa,EAA7C;AACD;AACF,CAPwB,CAAzB;AASA,MAAMK,IAAI,GAAGvB,UAAU,CAACwB,IAAX,CAAgB,CAAClB,QAAD,EAAWU,SAAX,EAAsBZ,QAAtB,CAAhB,CAAb;AAEA,MAAMqB,MAAM,GAAG,IAAI5B,YAAJ,CAAiB;AAC9B0B,EAAAA,IAAI,EAAEA,IADwB;AAE9BG,EAAAA,KAAK,EAAE,IAAI3B,aAAJ,EAFuB;AAG9B4B,EAAAA,iBAAiB,EAAE;AAHW,CAAjB,CAAf;AAMA,eAAeF,MAAf","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache, ApolloLink } from \"@apollo/client\";\nimport cookie from \"js-cookie\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.NODE_ENV === \"production\" ? \"https://api.loelblog.com/graphql\" : \"http://146.56.176.230:3301/graphql\",\n  // uri: \"https://api.loelblog.com/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = cookie.get(\"accessToken\");\n  const user = localStorage.getItem(\"user\");\n\n  if (!token) {\n    if (user) localStorage.removeItem(\"user\");\n    return;\n  }\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token,\n    },\n  };\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {\n  if (graphQLErrors) {\n    console.log(graphQLErrors);\n  }\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\n\nconst link = ApolloLink.from([authLink, errorLink, httpLink]);\n\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}
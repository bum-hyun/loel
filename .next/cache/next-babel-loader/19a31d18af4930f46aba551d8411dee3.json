{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, createHttpLink, InMemoryCache, ApolloLink } from \"@apollo/client\";\nimport cookie from \"js-cookie\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nconst httpLink = createHttpLink({\n  uri: true ? \"https://api.loelblog.com/graphql\" : \"http://localhost:3301/graphql\" // uri: \"https://api.loelblog.com/graphql\",\n\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = cookie.get(\"accessToken\");\n  const user = localStorage.getItem(\"user\");\n\n  if (!token) {\n    if (user) localStorage.removeItem(\"user\");\n    return;\n  }\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token\n    })\n  };\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError,\n  operation,\n  forward\n}) => {\n  if (graphQLErrors) {\n    console.log(graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log(`[Network error]: ${networkError}`);\n  }\n});\nconst link = ApolloLink.from([authLink, errorLink, httpLink]);\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\nexport default client;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport styled from \"styles/styled\";\nimport { DefaultLayout } from \"layouts\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Button } from \"styles\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { REMOVE_POST, CREATE_COMMENT, GET_COMMENTS, GET_ALL_POSTS } from \"@api/Post\";\nimport \"prismjs/themes/prism.css\";\nimport { decodeHTMLForHeader, dateDisplay } from \"@utils/common\";\nimport { css } from \"@emotion/core\";\nimport service from \"@utils/service\";\n\nconst Post = ({\n  authority,\n  post\n}) => {\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"Loading...\"\n    });\n  }\n\n  const id = post.id.toString();\n  const {\n    0: comments,\n    1: setComments\n  } = useState(null);\n  const {\n    0: comment,\n    1: setComment\n  } = useState({\n    name: \"\",\n    password: \"\",\n    contents: \"\",\n    class: 0\n  });\n  useQuery(GET_COMMENTS, {\n    fetchPolicy: \"cache-first\",\n    variables: {\n      postId: id\n    },\n    onCompleted: data => {\n      setComments(data.getComments);\n    }\n  });\n  const [RemovePostMutation] = useMutation(REMOVE_POST, {\n    refetchQueries: [{\n      query: GET_ALL_POSTS\n    }],\n    onCompleted: () => {\n      router.push(`/`);\n    }\n  });\n\n  const pushEditPage = () => {\n    router.push(`/edit?id=${id}`);\n  };\n\n  const remove = async () => {\n    await RemovePostMutation({\n      variables: {\n        id: id\n      }\n    });\n  };\n\n  const autoIncreaseHeight = event => {\n    const {\n      target\n    } = event;\n    target.style.height = `${target.scrollHeight + 2}px`;\n  };\n\n  const handleCommentInput = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setComment(_objectSpread(_objectSpread({}, comment), {}, {\n      [name]: value\n    }));\n  };\n\n  const [CreateCommentMutation] = useMutation(CREATE_COMMENT, {\n    refetchQueries: [{\n      query: GET_COMMENTS,\n      variables: {\n        postId: id\n      }\n    }],\n    awaitRefetchQueries: true,\n    update: (store, {\n      data: {\n        createComment\n      }\n    }) => {\n      const newComments = comments ? [createComment, ...comments] : null;\n      setComments(newComments);\n    },\n    onCompleted: () => {\n      setComment({\n        name: \"\",\n        password: \"\",\n        contents: \"\",\n        class: 0\n      });\n    }\n  });\n\n  const registerComment = async () => {\n    const {\n      name,\n      password,\n      contents\n    } = comment;\n\n    if (!name) {\n      alert(\"닉네임을 입력해주세요.\");\n      return;\n    }\n\n    if (!password) {\n      alert(\"비밀번호를 입력해주세요.\");\n      return;\n    }\n\n    if (!contents) {\n      alert(\"댓글 내용을 입력해주세요.\");\n      return;\n    }\n\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    await CreateCommentMutation({\n      variables: {\n        comment,\n        postId: id,\n        email: user && user.email ? user.email : \"\"\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"link\", {\n        rel: \"canonical\",\n        href: `https://www.loelblog.com/post/${id}`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"title\",\n        content: `Loel's Blog ${post ? ` - ` + post.title : \"\"}`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: decodeHTMLForHeader(post ? post.html : \"음식과 여행을 좋아하는 개발자의 블로그 입니다.\")\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:title\",\n        content: `Loel's Blog ${post ? ` - ` + post.title : \"\"}`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:type\",\n        content: \"article\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:url\",\n        content: `https://www.loelblog.com/post/${id}`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:description\",\n        content: decodeHTMLForHeader(post ? post.html : \"음식과 여행을 좋아하는 개발자의 블로그 입니다.\")\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:image\",\n        content: \"https://images.loelblog.com/thumb/background.jpg\"\n      }), /*#__PURE__*/_jsx(\"title\", {\n        children: `Loel's Blog ${post ? ` - ` + post.title : \"\"}`\n      })]\n    }), post && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(PostWrap, {\n        children: [/*#__PURE__*/_jsxs(HeadWrap, {\n          children: [/*#__PURE__*/_jsx(Title, {\n            children: post.title\n          }), /*#__PURE__*/_jsxs(InfoWrap, {\n            children: [/*#__PURE__*/_jsx(Author, {\n              children: post.email\n            }), /*#__PURE__*/_jsx(CreatedAt, {\n              children: dateDisplay(post.updatedAt)\n            }), authority && /*#__PURE__*/_jsxs(EditWrap, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                onClick: pushEditPage,\n                variant: \"warning\",\n                children: \"\\uC218\\uC815\"\n              }), /*#__PURE__*/_jsx(Button, {\n                onClick: remove,\n                variant: \"danger\",\n                children: \"\\uC0AD\\uC81C\"\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(ContentWrap, {\n          className: \"tui-editor-contents\",\n          dangerouslySetInnerHTML: {\n            __html: post.html2 ? post.html2 : post.html\n          }\n        })]\n      }), /*#__PURE__*/_jsxs(CommentRegisterWrap, {\n        children: [/*#__PURE__*/_jsxs(TotalComment, {\n          children: [\"\\uB313\\uAE00 \", comments ? comments.length : 0]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(CommentWriterWrap, {\n            children: [/*#__PURE__*/_jsx(CommentWriterInput, {\n              name: \"name\",\n              maxLength: 40,\n              value: comment.name,\n              onChange: handleCommentInput,\n              placeholder: \"닉네임\"\n            }), /*#__PURE__*/_jsx(CommentWriterInput, {\n              name: \"password\",\n              maxLength: 40,\n              value: comment.password,\n              onChange: handleCommentInput,\n              placeholder: \"비밀번호\"\n            })]\n          }), /*#__PURE__*/_jsx(InputComment, {\n            name: \"contents\",\n            value: comment.contents,\n            onChange: handleCommentInput,\n            onInput: autoIncreaseHeight,\n            placeholder: \"댓글을 남겨주세요.\"\n          }), /*#__PURE__*/_jsx(CommentRegisterButton, {\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"success\",\n              width: 120,\n              height: 40,\n              onClick: registerComment,\n              children: \"\\uB313\\uAE00 \\uC791\\uC131\"\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(CommentsWrap, {\n        children: comments && comments.length > 0 && comments.map(item => {\n          return /*#__PURE__*/_jsxs(CommentWrap, {\n            children: [/*#__PURE__*/_jsxs(CommentInfoWrap, {\n              children: [/*#__PURE__*/_jsx(CommentWriterName, {\n                children: item.name\n              }), /*#__PURE__*/_jsx(CommentCreatedAt, {\n                children: dateDisplay(item.createdAt)\n              })]\n            }), /*#__PURE__*/_jsx(Comment, {\n              children: item.contents\n            })]\n          }, item.id);\n        })\n      })]\n    })]\n  });\n};\n\nexport default DefaultLayout(Post);\nexport async function getStaticPaths() {\n  const {\n    data\n  } = await service.get(\"/post\");\n  const paths = data && data.map(item => ({\n    params: {\n      id: item.id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const {\n    data\n  } = await service.get(`/post/${params.id}`);\n  return {\n    props: {\n      post: data\n    },\n    revalidate: 1\n  };\n}\nconst Border = css`\n  border: 1px solid #e4e4e4;\n  border-radius: 4px;\n`;\nconst PostWrap = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 2rem 0;\n`;\nconst HeadWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n  padding-bottom: 2rem;\n  border-bottom: 1px solid #eee;\n`;\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  line-height: 1.5;\n  font-weight: 800;\n  color: #313131;\n  word-break: keep-all;\n  margin-bottom: 2rem;\n`;\nconst InfoWrap = styled.div`\n  display: flex;\n  font-size: 1rem;\n`;\nconst Author = styled.span`\n  margin-right: 10px;\n  font-weight: 600;\n`;\nconst CreatedAt = styled.span``;\nconst ContentWrap = styled.article`\n  font-size: 1rem;\n\n  img {\n    display: block;\n    max-width: 768px;\n  }\n`;\nconst EditWrap = styled.div`\n  margin-left: auto;\n\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\nconst CommentRegisterWrap = styled.div`\n  padding-bottom: 2rem;\n`;\nconst TotalComment = styled.div`\n  margin: 0.5rem 0.5rem 1rem;\n  font-weight: 500;\n`;\nconst InputComment = styled.textarea`\n  margin-bottom: 1rem;\n  padding: 0.625rem;\n  width: 100%;\n  min-height: 5rem;\n  font-size: 1rem;\n  line-height: 1.75;\n  ${Border}\n  resize: none;\n`;\nconst CommentRegisterButton = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\nconst CommentsWrap = styled.div`\n  margin: 1.5rem 0 3rem;\n`;\nconst CommentWriterWrap = styled.div`\n  margin-bottom: 1rem;\n`;\nconst CommentWriterInput = styled.input`\n  margin: 0;\n  padding: 2px 10px;\n  height: 38px;\n  font-size: 1rem;\n  color: #4c4c4c;\n  line-height: 1.2;\n  ${Border}\n\n  + input {\n    margin-left: 1rem;\n  }\n`;\nconst CommentWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid #efefef;\n`;\nconst CommentInfoWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 1.5rem;\n`;\nconst CommentWriterName = styled.div`\n  font-weight: 600;\n  margin-bottom: 5px;\n`;\nconst CommentCreatedAt = styled.div`\n  font-size: 0.875rem;\n  color: #8a8a8a;\n`;\nconst Comment = styled.div`\n  font-size: 1.2rem;\n  line-height: 1.5;\n`;","map":null,"metadata":{},"sourceType":"module"}
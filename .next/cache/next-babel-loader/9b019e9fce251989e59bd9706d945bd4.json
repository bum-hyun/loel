{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styles/styled\";\n\nconst Collapse = ({\n  active,\n  accordion,\n  children\n}) => {\n  const {\n    0: activeIndex,\n    1: setActiveIndex\n  } = useState(active ? active : accordion ? 0 : []);\n\n  const showContent = index => {\n    if (accordion) {\n      setActiveIndex(index);\n    } else {\n      let temp;\n\n      if (activeIndex.includes(index)) {\n        temp = activeIndex.filter(item => item !== index);\n      } else {\n        temp = activeIndex.concat(index);\n      }\n\n      setActiveIndex(temp);\n    }\n  };\n\n  const childrenWithProps = React.Children.map(children, (child, index) => {\n    if ((child === null || child === void 0 ? void 0 : child.type) === Panel) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        showContent,\n        index,\n        isActive: accordion ? index === activeIndex : activeIndex.includes(index)\n      });\n    } else {\n      throw new Error(\"패널 컴포넌트를 넣어주세요.\");\n    }\n  });\n  return /*#__PURE__*/_jsx(Container, {\n    children: childrenWithProps\n  });\n};\n\nexport default Collapse;\nexport const Panel = (_ref) => {\n  let {\n    title,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"title\", \"children\"]);\n\n  const {\n    showContent,\n    index,\n    isActive\n  } = rest;\n  const ref = useRef(null);\n  const {\n    0: height,\n    1: setHeight\n  } = useState(0);\n  useEffect(() => {\n    if (ref.current) {\n      setHeight(ref.current.scrollHeight);\n    }\n  }, [ref]);\n  return /*#__PURE__*/_jsxs(Wrap, {\n    children: [/*#__PURE__*/_jsx(Header, {\n      index: index,\n      onClick: () => showContent(index),\n      children: title\n    }), ref && /*#__PURE__*/_jsx(ContentWrap, {\n      active: isActive,\n      ref: ref,\n      height: height,\n      children: /*#__PURE__*/_jsx(Content, {\n        children: children\n      })\n    })]\n  });\n};\nconst Container = styled.div`\n  width: 100%;\n  border: 1px solid #e6e6e6;\n  border-radius: 2px;\n`;\nconst Wrap = styled.div`\n  width: 100%;\n`;\nconst Header = styled.div`\n  padding: 1rem;\n  color: #000;\n  background-color: #ddd;\n  ${p => p.index === 0 && \"border-top-left-radius: 4px; border-top-right-radius: 4px;\"}\n  cursor: pointer;\n`;\nconst ContentWrap = styled.div`\n  padding: 0 1rem;\n  height: ${p => p.active ? p.height : \"0\"}px;\n  background-color: #fff;\n  overflow: hidden;\n  transition: height 0.2s ease-out;\n`;\nconst Content = styled.p`\n  margin: 1rem 0;\n`;","map":null,"metadata":{},"sourceType":"module"}